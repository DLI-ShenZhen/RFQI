location.pair = sapply(value, function(x){
flag = s.sel %in% x
result = ifelse(sum(flag)==0, NA, max(which(flag)))
})
inner_bracket_idx.pair = location.pair[which.max(location.pair)] # can get "[" in 2 location
location.pair
value
# construct mode dictionary, the first bracket as key, the second bracket as value
key = sapply(mode,function(x){x[1]})
value = sapply(mode, function(x){x[2]})
# check which bracket is the most inner
location = sapply(key, function(x){
flag = s.sel %in% x
result = ifelse(sum(flag)==0, NA, max(which(flag)))
})
inner_bracket_idx = location[which.max(location)] # can get "[" in 2 postion in s.sel
# check whether paired bracket is the next
location.pair = sapply(value, function(x){
flag = s.sel %in% x
result = ifelse(sum(flag)==0, NA, max(which(flag)))
})
inner_bracket_idx.pair = location.pair[which.max(location.pair)] # can get "[" in 2 location
inner_bracket_idx
inner_bracket_idx.pair
inner_bracket_idx
# check whether paired bracket is the next
paired_bracket = value[key==names(inner_bracket_idx)]
paired_bracket
which.max(s.sel %in% paired_bracket)
which.max(c(NA))
judge = function(s, mode){
# mode: a list of paired bracket, such as
if (FALSE){
mode = list(
c("{","}"),
c("[","]"),
c("(",")")
)
}
# construct mode dictionary, the first bracket as key, the second bracket as value
key = sapply(mode,function(x){x[1]})
value = sapply(mode, function(x){x[2]})
# select char matched to mode_set from s
# "{a[dd]}" > "{[]}"
mode_set = unlist(mode) # returns c("{","}","[","]")
s.split = break_str(s)
s.sel = s.split[s.split %in% mode_set]
# if number of paired bracket not equal, return "not pass"
for (i in 1:length(key)){
if (sum(s.sel == key[i]) != sum(s.sel == value[i])){
return("not pass")
}
}
# if number of paired bracket equal, check location
while(length(s.sel) >0){
# check which bracket is the most inner
location = sapply(key, function(x){
flag = s.sel %in% x
result = ifelse(sum(flag)==0, NA, max(which(flag)))
})
inner_bracket_idx = location[which.max(location)] # can get "[" in 2 postion in s.sel
# check whether paired bracket is the next
paired_bracket = value[key==names(inner_bracket_idx)]
paired_bracket_idx = which.max(s.sel %in% paired_bracket)
if (length(paired_bracket_idx)==0) {return ("not pass")}
# if paired brackets are one by one, remove them from s.sel
if (paired_bracket_idx - inner_bracket_idx == 1){
s.sel = s.sel[-c(paired_bracket_idx, inner_bracket_idx)]
} else {
return ("not pass")
}
}
return ("pass")
}
judge = function(s, mode=NULL){
# mode: a list of paired bracket, such as
if (is.null(mode)){
mode = list(
c("{","}"),
c("[","]"),
c("(",")")
)
}
# construct mode dictionary, the first bracket as key, the second bracket as value
key = sapply(mode,function(x){x[1]})
value = sapply(mode, function(x){x[2]})
# select char matched to mode_set from s
# "{a[dd]}" > "{[]}"
mode_set = unlist(mode) # returns c("{","}","[","]")
s.split = break_str(s)
s.sel = s.split[s.split %in% mode_set]
# if number of paired bracket not equal, return "not pass"
for (i in 1:length(key)){
if (sum(s.sel == key[i]) != sum(s.sel == value[i])){
return("not pass")
}
}
# if number of paired bracket equal, check location
while(length(s.sel) >0){
# check which bracket is the most inner
location = sapply(key, function(x){
flag = s.sel %in% x
result = ifelse(sum(flag)==0, NA, max(which(flag)))
})
inner_bracket_idx = location[which.max(location)] # can get "[" in 2 postion in s.sel
# check whether paired bracket is the next
paired_bracket = value[key==names(inner_bracket_idx)]
paired_bracket_idx = which.max(s.sel %in% paired_bracket)
if (length(paired_bracket_idx)==0) {return ("not pass")}
# if paired brackets are one by one, remove them from s.sel
if (paired_bracket_idx - inner_bracket_idx == 1){
s.sel = s.sel[-c(paired_bracket_idx, inner_bracket_idx)]
} else {
return ("not pass")
}
}
return ("pass")
}
judge(s="{[}")
judge(s="{[]}")
judge(s="{]}")
judge(s="{[}]")
mode = list(
c("{","}"),
c("[","]"),
c("(",")"),
c(""",""")
)
mode = list(
c("{","}"),
c("[","]"),
c("(",")"),
c("\"","\"")
)
mode
#' judge whether paired bracket appear one by one
#' @param s string to be validate
#' @param mode is a list containing paired bracket
#' \test{
#' judge(s="{]}") # not pass
#'
#' judge(s="{[]}") # pass
#' }
judge = function(s, mode=NULL){
# mode: a list of paired bracket, such as
if (is.null(mode)){
mode = list(
c("{","}"),
c("[","]"),
c("(",")"),
c("\"","\"")
)
}
# construct mode dictionary, the first bracket as key, the second bracket as value
key = sapply(mode,function(x){x[1]})
value = sapply(mode, function(x){x[2]})
# select char matched to mode_set from s
# "{a[dd]}" > "{[]}"
mode_set = unlist(mode) # returns c("{","}","[","]")
s.split = break_str(s)
s.sel = s.split[s.split %in% mode_set]
# if number of paired bracket not equal, return "not pass"
for (i in 1:length(key)){
if (sum(s.sel == key[i]) != sum(s.sel == value[i])){
return("not pass")
}
}
# if number of paired bracket equal, check location
while(length(s.sel) >0){
# check which bracket is the most inner
location = sapply(key, function(x){
flag = s.sel %in% x
result = ifelse(sum(flag)==0, NA, max(which(flag)))
})
inner_bracket_idx = location[which.max(location)] # can get "[" in 2 postion in s.sel
# check whether paired bracket is the next
paired_bracket = value[key==names(inner_bracket_idx)]
paired_bracket_idx = which.max(s.sel %in% paired_bracket)
if (length(paired_bracket_idx)==0) {return ("not pass")}
# if paired brackets are one by one, remove them from s.sel
if (paired_bracket_idx - inner_bracket_idx == 1){
s.sel = s.sel[-c(paired_bracket_idx, inner_bracket_idx)]
} else {
return ("not pass")
}
}
return ("pass")
}
judge(s="{["]}")
judge(s="{]}")
judge(s="{[}]")
judge(s="{[\"]}")
judge(s="{[\"\"]}")
judge(s="{[]}")
x = c(A,A,B,B,D)
data = read.table("clipboard", header=TRUE,stringsAsFactors = FASLE)
data = read.table("clipboard", header=TRUE,stringsAsFactors = FALSE)
head(data)
plot(data)
plot(data[,1:2], size=data[,3])
plot(data[,1:2], cex=data[,3])
plot(data[,1:2], cex=data[,3]*10)
plot(data[,1:2], cex=data[,3]*5)
plot(data[,1:2], cex=data[,3]*4)
plot(x=rnorm(n=13, mean=1, sd=10), y=rnorm(n=13,mean=1,sd=10), cex=data[,3]*4)
x=rnorm(n=13, mean=1, sd=10)
y
y=rnorm(n=13,mean=1,sd=10)
x
y
plot(x,y)
plot(x,y,xlim=c(-10,10),ylim=c(-15,20))
plot(x,y,xlim=c(-10,10),ylim=c(-15,25))
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),size=20)
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=20)
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=data[,3])
plot(x,y,xlim=c(-10,10),ylim=c(-15,25))
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=data[,3]*2)
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=data[,3]*2, xlab="",ylab="",xaxt="n")
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=data[,3]*2, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=data[,3]*4, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=data[,3]*3, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=data[,3]*4, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,10),ylim=c(-15,25),cex=data[,3]*3, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,10),ylim=c(-15,35),cex=data[,3]*3, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*3, xlab="",ylab="",xaxt="n",yaxt="n")
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*3, xlab="",ylab="",xaxt="n",yaxt="n")
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*3, xlab="",ylab="",xaxt="n",yaxt="n")
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*3, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*4, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*3.5, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*5, xlab="",ylab="",xaxt="n",yaxt="n")
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n")
library(RColorBrewer)
display.brewer.all()
cols = brewer.pal(6,"Set2")
cols = rep(cols,2)[1:13]
cols
cols = brewer.pal(7,"Set2")
cols = rep(cols,2)[1:13]
library(scales)
library(scales)
alpha(cols,0.5)
cols
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
fill=alpha(cols,0.5))
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.5))
?plot
warnings()
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.5))
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.7))
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9))
plot(x,y,xlim=c(-10,15),ylim=c(-15,25),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
x
y
range(x)
range(y)
plot(x,y,xlim=c(-20,30),ylim=c(-17,12),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
plot(x,y,xlim=c(-25,30),ylim=c(-17,12),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
plot(x,y,xlim=c(-18,25),ylim=c(-17,12),cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
head(data)
text(x=x,y=y, labels = rownames(data))
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
text(x=x,y=y, labels = rownames(data))
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.9), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.8), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.8), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.8), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.8), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.8), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=10)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.8), pch=16)
text(x=x,y=y, labels = rownames(data))
}
{
x=rnorm(n=13,mean=1,sd=8)
y=rnorm(n=13,mean=1,sd=10)
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*6, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.8), pch=16)
text(x=x,y=y, labels = rownames(data))
}
plot(x,y,xlim=range(x)*1.1,ylim=range(y)*1.1,cex=data[,3]*8, xlab="",ylab="",xaxt="n",yaxt="n",
col=alpha(cols,0.8), pch=16)
text(x=x,y=y, labels = rownames(data))
?text
par("font")
library(plotly)
help(package="plotly")
# An improvement on https://www.r-bloggers.com/ternary-plots-in-r-using-plotly/
library(plotly)
# acquire data
ds <- jsonlite::fromJSON(
"https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json"
)
df <- dplyr::bind_rows(ds, .id = "id")
# reusable function for creating annotation object
label <- function(txt) {
list(
text = txt,
x = 0.1, y = 1,
ax = 0, ay = 0,
xref = "paper", yref = "paper",
align = "center",
font = list(family = "serif", size = 15, color = "white"),
bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
)
}
# reusable function for axis formatting
axis <- function(txt) {
list(
title = txt, tickformat = ".0%", tickfont = list(size = 10)
)
}
ternaryAxes <- list(
aaxis = axis("Clay"),
baxis = axis("Sand"),
caxis = axis("Silt")
)
plot_ly(
df, a = ~clay, b = ~sand, c = ~silt, color = I("black"), type = "scatterternary"
) %>%
layout(
annotations = label("Ternary Markers"), ternary = ternaryAxes
)
plot_ly(
df, a = ~clay, b = ~sand, c = ~silt, color = I("black"), type = "scatterternary",
split = ~id, mode = "lines"
) %>%
layout(
annotations = label("Ternary Lines"), ternary = ternaryAxes
)
plot_ly(
df, a = ~clay, b = ~sand, c = ~silt, color = ~id, type = "scatterternary",
fill = "toself", mode = "lines"
) %>%
layout(
annotations = label("Ternary Contour"), ternary = ternaryAxes
)
library()
install.packages("BiocManager")
BiocManager::install("ChAMP")
BiocManager::install("Hmisc")
BiocManager::install("Hmisc")
library(Hmisc)
BiocManager::install("ChAMP")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
BiocManager::install("RCurl")
?BiocManager::install
BiocManager::install("GenomeInfoDb")
library(RCurl)
BiocManager::install("GenomeInfoDb")
BiocManager::install("DMRcate", update = FALSE)
BiocManager::install("DMRcatedata", update = FALSE)
BiocManager::install("DMRcatedata", update = FALSE)
BiocManager::install("DMRcate", update = FALSE)
BiocManager::install("IlluminaHumanMethylation450kmanifest", update = FALSE)
BiocManager::install("DMRcate", update = FALSE)
BiocManager::install("IlluminaHumanMethylation450kanno.ilmn12.hg19", update = FALSE)
BiocManager::install("ChAMP", update = TRUE)
library(ChAMP)
BiocManager::install("DMRcate", update = FALSE)
BiocManager::install("DMRcate", update = FALSE)
BiocManager::install("IlluminaHumanMethylationEPICanno.ilm10b4.hg19", update = FALSE)
BiocManager::install("DMRcate", update = FALSE)
library("DMRCate")
library("DMRcate")
library(ChAMP)
BiocManager::install("geneLenDatabase", update = FALSE)
BiocManager::install("geneLenDataBase", update = FALSE)
library(ChAMP)
console(-25)
history(max.show = 25)
a = median(c(1,2,3))
mode(a)
a = median(c(1L,2L,3L))
mode(a)
y = 1:4
attr(y, "a") = "abc"
y
y = 1:5
y
attr(y,"a")
cbind(c(1,2,3), list(4,5,6))
cbind(c(1,2,3), list(c(4,5,6)))
a = cbind(c(1,2,3), list(4,5,6))
mode(a)
a = data.frame(a=c(1,2,3), b=c(1,2,3))
a
names(a)
names(a) = c("q","a")
a
rm(list = ls())
?merge
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
R
R.version
options(repos = "https://mirrors.ustc.edu.cn/CRAN/")
install.package("devtools")
install.packages("devtools")
install.packages("usethis")
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")
biocLite("mzR=2.16.1")
biocLite("mzR")
biocLite("MSnbase")
biocLite("XM:")
biocLite("XML")
biocLite("XML")
install.packages("xml2")
biocLite("MSnbase")
biocLite("MSnbase")
biocLite("MSnbase")
biocLite("MSnbase")
source("https://bioconductor.org/biocLite.R")
biocLite("mzR")
library()
source("https://bioconductor.org/biocLite.R")
setwd("G:/RFQI/")
devtools::document()
