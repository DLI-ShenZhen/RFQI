p.psm <- p.adj <- array(NA, dim(list.psm), dimnames(list.psm))
lor.psm <- array(NA, c(dim(list.psm),3),
c(dimnames(list.psm), list(c("estimate","LL.95CI", "UL.95CI"))))
for(Ci in 1:ncol(list.psm)){
testmat <- matrix(c(0, sum(list.psm[,Ci]), 0, sum(univ.psm[, Ci])),2)
for(AA in rownames(list.psm)){
testmat[c(1,3)] <- c(list.psm[AA,Ci], univ.psm[AA,Ci])
test <- fisher.test(testmat)
p.psm[AA, Ci] <- test$p.value
lor.psm[AA, Ci, ] <- log(c(test$estimate, test$conf.int))
}
}
# adjust the p-values
ndxs <- which(!is.na(p.psm) & lor.psm[, , 1]!=0)
p.adj[ndxs] <- p.adjust(p.psm[ndxs], method=padj.method)
p.adj = "fdr"
p.adj[ndxs] <- p.adjust(p.psm[ndxs], method=padj.method)
padj.method = "fdr"
conf.level = 0.95
p.adj[ndxs] <- p.adjust(p.psm[ndxs], method=padj.method)
p.adj[which(lor.psm==0)] <- 0
p.cut <- 1 - conf.level
# trim off motif ends where no AAs are signficantly enriched/depleted
cndxs <- which(apply(p.adj<p.cut | lor.psm[,,1]==0, 2, sum, na.rm=T)>0)
cndxs <- min(cndxs):max(cndxs)
list.psm <- list.psm[,cndxs]
univ.psm <- univ.psm[,cndxs]
p.psm <- p.psm[,cndxs]
p.adj <- p.adj[,cndxs]
cndxs
head(p.adj)
# adjust the p-values
ndxs <- which(!is.na(p.psm) & lor.psm[, , 1]!=0)
# adjust the p-values
ndxs <- which(!is.na(p.psm) & lor.psm[, , 1]!=0)
#............................................................................
# align the universe peptides according to the defining sub-sequence(s)
at <- regexpr(smotif[1], universe)
if(any(at<0)) browser()
universe = peptides
if(length(branch)!=1) stop("branch argument must specify a single branch")
x <- pruneSubseqCluster(x, branch)
listpeps <- x$peps$peptide
smotif <- c()
for(Bi in nchar(branch):1){
# climb the tree to gather all sub-sequences that make up the sub-motif
parent <- substr(branch, 1, Bi)
smotif <- c(smotif,
setdiff(unlist(strsplit(x$tree[parent,"shared"]," & ")),"(none)"))
}
#         lapply(structure(as.list(smotif),names=smotif), function(x){
#               at <- rev(sort(table(regexpr(x, listpeps))))
#               data.frame(row.names=x,
#                  at=as.numeric(names(at)[1]), n=at[1], len=nchar(x))
#            }))
#      # if ties, break by decreasing frequency at position, then length
#      N.pos <- N.pos[order(N.pos$at, -N.pos$n, -N.pos$len),]
#      smotif <- rownames(N.pos)
#   }
# subset the universe of sequences to those with this sub-motif
for(subseq in smotif) universe <- grep(subseq, universe, v=T)
AAs <- intersect(LETTERS, names(table(unlist(strsplit(universe,"")))))
# summarize list occurrences by length and position from termini
result <- list()
seqlen <- nchar(regextr(smotif[1],universe[1]))
for(what in c("from_N","from_C","padding")){
if(what=="from_N"){
n.univ <- table(regexpr(smotif[1], universe) - 1)
n.list <- table(regexpr(smotif[1], listpeps) - 1)
}else if(what=="from_C"){
n.univ <-
table(nchar(universe) - regexpr(smotif[1], universe) - seqlen + 1)
n.list <-
table(nchar(listpeps) - regexpr(smotif[1], listpeps) - seqlen + 1)
}else if(what=="padding"){
n.univ <- table(nchar(universe)-seqlen)
n.list <- table(nchar(listpeps)-seqlen)
}
tmp <- data.frame(row.names=names(n.univ), property=what,
value=as.numeric(names(n.univ)), p.value=NA, lor=NA, lor.inner=NA,
lor.95LL=NA, lor.95UL=NA, pct.list=0, pct.univ=0, relprob=NA,
n.list=0, n.univ=untab(n.univ))
tmp[names(n.list), "n.list"] <- untab(n.list)
tmp$pct.list <- tmp$n.list / sum(tmp$n.list)
tmp$pct.univ <- tmp$n.univ / sum(tmp$n.univ)
tmp$relprob <- tmp$pct.list / tmp$pct.univ
# test for enrichment/depletion by sub-motif position and peptide length
testmat <- matrix(c(0, length(listpeps), 0, length(universe)),2)
for(Ri in rownames(tmp)){
testmat[c(1,3)] <- unlist(tmp[Ri, c("n.list","n.univ")])
test <- fisher.test(testmat)
tmp[Ri,"p.value"] <- test$p.value
tmp[Ri,"lor"] <- log(test$estimate)
tmp[Ri,"lor.inner"] <-
log(test$conf.int)[ifelse(log(test$estimate)>0,1,2)]
tmp[Ri,"lor.95LL"] <- log(test$conf.int[1])
tmp[Ri,"lor.95UL"] <- log(test$conf.int[2])
}
result[[what]] <- tmp
}
#............................................................................
# align the universe peptides according to the defining sub-sequence(s)
at <- regexpr(smotif[1], universe)
if(any(at<0)) browser()
lpad <- max(at) - at
universe <-
format(paste0(strrep(" ",lpad),universe),just="left")
# align the peptides in the list
at <- regexpr(smotif[1], listpeps)
lpad <- max(at) - at
listpeps <-
format(paste0(strrep(" ",lpad),listpeps),just="left")
#listpeps <- x$peps$aligned
# align universe to listpeps and trim to same length
universe <- substr(universe,
regexpr(smotif[1], universe[1])-regexpr(smotif[1], listpeps[1])+1,
nchar(universe[1]))
universe <- substr(universe, 1, nchar(listpeps[1]))
# remove any from the universe that no longer have all subseqs
for(subseq in smotif) universe <- grep(subseq, universe, v=T)
# tabulate AA occurrences by position in the list and universe
list.psm <- do.call(rbind, strsplit(listpeps, ""))
list.psm <- apply(list.psm, 2, function(x) table(factor(x, AAs)))
univ.psm <- do.call(rbind, strsplit(universe, ""))
univ.psm <- apply(univ.psm, 2, function(x) table(factor(x, AAs)))
# calculate log odds ratio/p-values by Fisher's exact test, list vs. universe
p.psm <- p.adj <- array(NA, dim(list.psm), dimnames(list.psm))
lor.psm <- array(NA, c(dim(list.psm),3),
c(dimnames(list.psm), list(c("estimate","LL.95CI", "UL.95CI"))))
for(Ci in 1:ncol(list.psm)){
testmat <- matrix(c(0, sum(list.psm[,Ci]), 0, sum(univ.psm[, Ci])),2)
for(AA in rownames(list.psm)){
testmat[c(1,3)] <- c(list.psm[AA,Ci], univ.psm[AA,Ci])
test <- fisher.test(testmat)
p.psm[AA, Ci] <- test$p.value
lor.psm[AA, Ci, ] <- log(c(test$estimate, test$conf.int))
}
}
# adjust the p-values
ndxs <- which(!is.na(p.psm) & lor.psm[, , 1]!=0)
p.adj[ndxs] <- p.adjust(p.psm[ndxs], method=padj.method)
p.adj[which(lor.psm==0)] <- 0
p.cut <- 1 - conf.level
# trim off motif ends where no AAs are signficantly enriched/depleted
cndxs <- which(apply(p.adj<p.cut | lor.psm[,,1]==0, 2, sum, na.rm=T)>0)
cndxs <- min(cndxs):max(cndxs)
list.psm <- list.psm[,cndxs]
univ.psm <- univ.psm[,cndxs]
p.psm <- p.psm[,cndxs]
p.adj <- p.adj[,cndxs]
lor.psm <- lor.psm[, cndxs, ]
at <- c(regexpr(smotif[1], listpeps[1]) - cndxs[1] + 1)
# summarize residues that show significant enrichment/depletion
pct.list <- 100*t(t(list.psm)/colSums(list.psm))
motif <- which(p.adj<p.cut | lor.psm[,,1]==0, arr.ind=T)
ndxs <- motif[,"row"] + nrow(p.psm)*(motif[,"col"]-1)
motif <- data.frame(position=motif[,"col"], shift=motif[,"col"]-at,
AA=rownames(motif), p.value=p.psm[ndxs], p.adj=p.adj[ndxs],
lor=lor.psm[,,1][ndxs], lor.inner=NA, lor.95LL=lor.psm[,,2][ndxs],
lor.95UL=lor.psm[,,3][ndxs], pct.list=pct.list[ndxs],
n.list=list.psm[ndxs], n.univ=univ.psm[ndxs])
# carry over the branch LOR/p-values to residues that define the sub-motif
these <- which(motif$lor==0)
motif[these, c("p.value", "p.adj")] <- x$tree[branch, "p_smotif"]
x$tree[branch, "p_smotif"]
x$tree
source("HT/rcode/Functions/Omics/clusterBySubseqs.R")
# subseqs = subseqStats(seqs=seqs, k.max = 5, k.min=2)
# View(subseqs)
seqclusts = clusterBySubseqs(peps=seqs, k.min = 5)
str(seqclusts, max.level = 2)
head(seqclusts$tree)
print.subseqCluster(seqclusts)
pruned = pruneSubseqCluster(seqclusts.prob)
View(pruned$tree)
analyzeBranchPSM(x=seqclusts, branch="AKB", universe = peptides)
analyzeBranchPSM(x=pruned, branch="AKB", universe = peptides)
pruned$tree
analyzeBranchPSM(x=pruned, branch="ADF", universe = peptides)
branch
x = seqclusts
if(length(branch)!=1) stop("branch argument must specify a single branch")
x <- pruneSubseqCluster(x, branch)
x$tree
pruned = pruneSubseqCluster(seqclusts)
pruned = pruneSubseqCluster(seqclusts, branches = "AKB")
View(pruned$tree)
listpeps <- x$peps$peptide
smotif <- c()
for(Bi in nchar(branch):1){
# climb the tree to gather all sub-sequences that make up the sub-motif
parent <- substr(branch, 1, Bi)
smotif <- c(smotif,
setdiff(unlist(strsplit(x$tree[parent,"shared"]," & ")),"(none)"))
}
#         lapply(structure(as.list(smotif),names=smotif), function(x){
#               at <- rev(sort(table(regexpr(x, listpeps))))
#               data.frame(row.names=x,
#                  at=as.numeric(names(at)[1]), n=at[1], len=nchar(x))
#            }))
#      # if ties, break by decreasing frequency at position, then length
#      N.pos <- N.pos[order(N.pos$at, -N.pos$n, -N.pos$len),]
#      smotif <- rownames(N.pos)
#   }
# subset the universe of sequences to those with this sub-motif
for(subseq in smotif) universe <- grep(subseq, universe, v=T)
AAs <- intersect(LETTERS, names(table(unlist(strsplit(universe,"")))))
# summarize list occurrences by length and position from termini
result <- list()
seqlen <- nchar(regextr(smotif[1],universe[1]))
for(what in c("from_N","from_C","padding")){
if(what=="from_N"){
n.univ <- table(regexpr(smotif[1], universe) - 1)
n.list <- table(regexpr(smotif[1], listpeps) - 1)
}else if(what=="from_C"){
n.univ <-
table(nchar(universe) - regexpr(smotif[1], universe) - seqlen + 1)
n.list <-
table(nchar(listpeps) - regexpr(smotif[1], listpeps) - seqlen + 1)
}else if(what=="padding"){
n.univ <- table(nchar(universe)-seqlen)
n.list <- table(nchar(listpeps)-seqlen)
}
tmp <- data.frame(row.names=names(n.univ), property=what,
value=as.numeric(names(n.univ)), p.value=NA, lor=NA, lor.inner=NA,
lor.95LL=NA, lor.95UL=NA, pct.list=0, pct.univ=0, relprob=NA,
n.list=0, n.univ=untab(n.univ))
tmp[names(n.list), "n.list"] <- untab(n.list)
tmp$pct.list <- tmp$n.list / sum(tmp$n.list)
tmp$pct.univ <- tmp$n.univ / sum(tmp$n.univ)
tmp$relprob <- tmp$pct.list / tmp$pct.univ
# test for enrichment/depletion by sub-motif position and peptide length
testmat <- matrix(c(0, length(listpeps), 0, length(universe)),2)
for(Ri in rownames(tmp)){
testmat[c(1,3)] <- unlist(tmp[Ri, c("n.list","n.univ")])
test <- fisher.test(testmat)
tmp[Ri,"p.value"] <- test$p.value
tmp[Ri,"lor"] <- log(test$estimate)
tmp[Ri,"lor.inner"] <-
log(test$conf.int)[ifelse(log(test$estimate)>0,1,2)]
tmp[Ri,"lor.95LL"] <- log(test$conf.int[1])
tmp[Ri,"lor.95UL"] <- log(test$conf.int[2])
}
result[[what]] <- tmp
}
#............................................................................
# align the universe peptides according to the defining sub-sequence(s)
at <- regexpr(smotif[1], universe)
if(any(at<0)) browser()
lpad <- max(at) - at
universe <-
format(paste0(strrep(" ",lpad),universe),just="left")
# align the peptides in the list
at <- regexpr(smotif[1], listpeps)
lpad <- max(at) - at
listpeps <-
format(paste0(strrep(" ",lpad),listpeps),just="left")
#listpeps <- x$peps$aligned
# align universe to listpeps and trim to same length
universe <- substr(universe,
regexpr(smotif[1], universe[1])-regexpr(smotif[1], listpeps[1])+1,
nchar(universe[1]))
universe <- substr(universe, 1, nchar(listpeps[1]))
# remove any from the universe that no longer have all subseqs
for(subseq in smotif) universe <- grep(subseq, universe, v=T)
# tabulate AA occurrences by position in the list and universe
list.psm <- do.call(rbind, strsplit(listpeps, ""))
list.psm <- apply(list.psm, 2, function(x) table(factor(x, AAs)))
univ.psm <- do.call(rbind, strsplit(universe, ""))
univ.psm <- apply(univ.psm, 2, function(x) table(factor(x, AAs)))
# calculate log odds ratio/p-values by Fisher's exact test, list vs. universe
p.psm <- p.adj <- array(NA, dim(list.psm), dimnames(list.psm))
lor.psm <- array(NA, c(dim(list.psm),3),
c(dimnames(list.psm), list(c("estimate","LL.95CI", "UL.95CI"))))
for(Ci in 1:ncol(list.psm)){
testmat <- matrix(c(0, sum(list.psm[,Ci]), 0, sum(univ.psm[, Ci])),2)
for(AA in rownames(list.psm)){
testmat[c(1,3)] <- c(list.psm[AA,Ci], univ.psm[AA,Ci])
test <- fisher.test(testmat)
p.psm[AA, Ci] <- test$p.value
lor.psm[AA, Ci, ] <- log(c(test$estimate, test$conf.int))
}
}
# adjust the p-values
ndxs <- which(!is.na(p.psm) & lor.psm[, , 1]!=0)
p.adj[ndxs] <- p.adjust(p.psm[ndxs], method=padj.method)
p.adj[which(lor.psm==0)] <- 0
p.cut <- 1 - conf.level
# trim off motif ends where no AAs are signficantly enriched/depleted
cndxs <- which(apply(p.adj<p.cut | lor.psm[,,1]==0, 2, sum, na.rm=T)>0)
cndxs <- min(cndxs):max(cndxs)
list.psm <- list.psm[,cndxs]
univ.psm <- univ.psm[,cndxs]
p.psm <- p.psm[,cndxs]
p.adj <- p.adj[,cndxs]
lor.psm <- lor.psm[, cndxs, ]
at <- c(regexpr(smotif[1], listpeps[1]) - cndxs[1] + 1)
# summarize residues that show significant enrichment/depletion
pct.list <- 100*t(t(list.psm)/colSums(list.psm))
motif <- which(p.adj<p.cut | lor.psm[,,1]==0, arr.ind=T)
ndxs <- motif[,"row"] + nrow(p.psm)*(motif[,"col"]-1)
motif <- data.frame(position=motif[,"col"], shift=motif[,"col"]-at,
AA=rownames(motif), p.value=p.psm[ndxs], p.adj=p.adj[ndxs],
lor=lor.psm[,,1][ndxs], lor.inner=NA, lor.95LL=lor.psm[,,2][ndxs],
lor.95UL=lor.psm[,,3][ndxs], pct.list=pct.list[ndxs],
n.list=list.psm[ndxs], n.univ=univ.psm[ndxs])
# carry over the branch LOR/p-values to residues that define the sub-motif
these <- which(motif$lor==0)
motif[these, c("p.value", "p.adj")] <- x$tree[branch, "p_smotif"]
motif[these, "lor"] <- x$tree[branch, "lor_smotif"]
motif[these, "lor.95LL"] <- x$tree[branch, "lor.95LL_smotif"]
motif[these, "lor.95UL"] <- x$tree[branch, "lor.95UL_smotif"]
seqclusts.prob = subseqProbs(seqclusts, universe = peptides)
View(seqclusts.prob$tree)
pruned = pruneSubseqCluster(seqclusts, branches = "AKB")
View(pruned$tree)
analyzeBranchPSM(x=seqclusts, branch="ADF", universe = peptides)
plot.PSM_motif(seqclusts)
analyzeBranchPSM(x=seqclusts, branch="ADF", universe = peptides)
analyzeBranchPSM(x=seqclusts.prob, branch="ADF", universe = peptides)
a = analyzeBranchPSM(x=seqclusts.prob, branch="ADF", universe = peptides)
plot.PSM_motif(a)
str(a)
head(seqclusts.prob$tree)
a = analyzeBranchPSM(x=seqclusts.prob, branch="AD", universe = peptides)
plot.PSM_motif(a)
a = analyzeBranchPSM(x=seqclusts.prob, branch="AFG", universe = peptides)
plot.PSM_motif(a)
a = analyzeBranchPSM(x=seqclusts.prob, branch="AHD", universe = peptides)
plot.PSM_motif(a)
a = analyzeBranchPSM(x=seqclusts.prob, branch="ADFG", universe = peptides)
plot.PSM_motif(a)
str(a)
head(a$motif)
head(a$from_N)
head(a$from_C)
head(a$padding)
head(a$motif)
head(seqclusts.prob$tree)
head(seqclusts.prob$tree, 20)
pruned = pruneSubseqCluster(seqclusts, branches = "AKB")
View(pruned$tree)
pruned$peps
aligned = pruned$peps$aligned
aligned
?p.adjust
a = analyzeBranchPSM(x=seqclusts.prob, branch="ADFG", universe = peptides, padj.method = "bonferroni")
head(a$motif)
plot.PSM_motif(a)
plot.PSM_motif(a, type="all")
b = plot.PSM_motif(a, type="all")
plot.PSM_motif(a, type="all")
rm(list = ls())
gc()
input = read.csv(file="G:/HealthTell/HT/20200319_IST0003_Lungcancer_LADA_GBS_peps/ht_pvalue_lada_p=5e-2.csv", header=TRUE)
head(input)
peptides = read.table(file="HT/20200319_IST0003_Lungcancer_LADA_GBS_peps/lib.ndxs")
head(peptides)
peptides = unlist(peptides)
head(peptides)
seqs = input$X
head(seqs)
options(stringsAsFactors = FALSE)
input = read.csv(file="G:/HealthTell/HT/20200319_IST0003_Lungcancer_LADA_GBS_peps/ht_pvalue_lada_p=5e-2.csv", header=TRUE)
peptides = read.table(file="HT/20200319_IST0003_Lungcancer_LADA_GBS_peps/lib.ndxs")
peptides = unlist(peptides)
seqs = input$X
# subseqs = subseqStats(seqs=seqs, k.max = 5, k.min=2)
# View(subseqs)
seqclusts = clusterBySubseqs(peps=seqs, k.min = 5)
peptides = sapply(peptides, function(s){unlist(strsplit(s, split="_Acx"))[2]})
head(peptides)
peptides = unlist(peptides)
peptides = read.table(file="HT/20200319_IST0003_Lungcancer_LADA_GBS_peps/lib.ndxs")
peptides = unlist(peptides)
peptides_short = sapply(peptides, function(s){unlist(strsplit(s, split="_Acx"))[2]})
peptides_long = read.table(file="HT/20200319_IST0003_Lungcancer_LADA_GBS_peps/lib.ndxs")
peptides_long = unlist(peptides)
peptides_long = read.table(file="HT/20200319_IST0003_Lungcancer_LADA_GBS_peps/lib.ndxs")
peptides_long = unlist(peptides)
peptides = sapply(peptides, function(s){unlist(strsplit(s, split="_Acx"))[2]})
seqs_long = input$X
seqs = sapply(seqs, function(s){unlist(strsplit(s, split="_Acx"))[2]})
# ---- cluster ------ #
seqclusts = clusterBySubseqs(peps=seqs, k.min = 5)
str(seqclusts, max.level = 2)
head(seqclusts$tree)
print.subseqCluster(seqclusts)
seqclusts.prob = subseqProbs(seqclusts, universe = peptides)
head(seqclusts.prob$tree, 20)
pruned = pruneSubseqCluster(seqclusts, branches = "AFC")
aligned = pruned$peps$aligned
aligned
a = analyzeBranchPSM(x=seqclusts.prob, branch="ADFG", universe = peptides, padj.method = "bonferroni")
head(a$motif)
plot.PSM_motif(a, type="all")
a = analyzeBranchPSM(x=seqclusts.prob, branch="AFC", universe = peptides, padj.method = "bonferroni")
head(a$motif)
a$motif
plot.PSM_motif(a, type="all")
plot.PSM_motif(a, type="all", xlim=c(0,5))
plot.PSM_motif(a, type="motif", xlim=c(0,5))
plot.PSM_motif(a, type="motif")
plot.PSM_motif(a, type="all")
pruned = pruneSubseqCluster(seqclusts, branches = "AGF")
aligned = pruned$peps$aligned
aligned
a = analyzeBranchPSM(x=seqclusts.prob, branch="AGF", universe = peptides, padj.method = "bonferroni")
head(a$motif)
plot.PSM_motif(a, type="all")
print.subseqCluster(seqclusts)
head(seqclusts$tree)
head(seqclusts$peps)
head(a)
head(aligned)
head(seqclusts.prob$tree, 20)
sel = seqclusts.prob$tree
head(sel)
table(sel$p_branch)
summary(sel$p_branch)
summary(sel$p_branch<0.05)
summary(sel$p_branch<0.01)
head(sel)
sel[,"AFC"]
sel["AFC",]
str(seqclusts, max.level = 2)
head(seqclusts$tree)
print.subseqCluster(seqclusts)
pruned = pruneSubseqCluster(seqclusts, branches = "AFC")
aligned = pruned$peps$aligned
aligned
a = analyzeBranchPSM(x=seqclusts.prob, branch="AGF", universe = peptides, padj.method = "bonferroni")
head(a$motif)
sel = seqclusts.prob$tree
head(sel)
sel["AFC",]
View(sel)
head(a$motif)
write.csv(sel, file="mingchen.csv", sep=",")
write.csv(sel, file="mingchen.csv")
head(a$motif)
head(a$from_N)
head(sel)
which(sel$signif_smotif & sel$first_signif)
336/13692
head(sel)
ls()
rm(list = ls())
gc()
dev.off()
?do.call
list(1,2,3)
a = list(2,3,4)
b = function(x,y){x^y}
do.call(b, a)
rm(list = ls())
gc()
rm(list = ls())
setwd("F:/iCarbonX/gitlab/metabolomics/PaperDataAndCode/")
library(xlsx)
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
setwd("F:/iCarbonX/gitlab/metabolomics/PaperDataAndCode/")
load("library/spectrumDB_30ev_ICX.rData", verbose=TRUE)
write.table(spectrumDB$Info, sep="\t", fileEncoding = "utf-8")
write.table(spectrumDB$Info, file="library/spectrumDB_30ev_ICX.txt",sep="\t", fileEncoding = "utf-8")
write.table(spectrumDB$Info, file="library/spectrumDB_30ev_ICX.txt", sep="\t", fileEncoding = "utf-8")
write.table(spectrumDB$Info, file="library\\spectrumDB_30ev_ICX.txt", sep="\t", fileEncoding = "utf-8")
write.table(spectrumDB$Info, file="spectrumDB_30ev_ICX.txt", sep="\t", fileEncoding = "utf-8")
rm(list = ls())
gc()
library(RFQI)
library(RColorBrewer) # Select color set
library(scales) # adjust color transparent
library(igraph) # network graph
options(stringsAsFactors = FALSE)
setwd("F:/iCarbonX/gitlab/metabolomics/PaperDataAndCode")
# ------  input ------ #
load("RFQIResult/FT/ref_peaks_5ppm_85.rData", verbose = TRUE)
load("RFQIResult/MS2/db.MS2_MSS170428001_Urine.rData", verbose = TRUE)
load("RFQIResult/MS2/MS2_inner_cor.rData", verbose=TRUE)
ref_sample = "library/reference.mzXML"
# ------ compute features' metric ---- #
if (TRUE){
npeaks = as.numeric(features$group_FT[,"npeaks"])
features.summay = summary_L(features$group_FT)
MS2_num = db.MS2$MS2_to_MS1[,"MS1"]
MS2_num = table(MS2_num)
MS2_num = as.data.frame(MS2_num); rownames(MS2_num)=MS2_num[,"MS2_num"]
FT_metrics = cbind(features.summay, npeaks, MS2_num=0)
FT_metrics[rownames(MS2_num),"MS2_num"] = MS2_num[,"Freq"]
}
idx = "FT06612"
idx_MS2 = checkMS2(db.MS2, idx = idx)
idx = "FT06112"
idx_MS2 = checkMS2(db.MS2, idx = idx)
idx_Peaks = checkFT(features = features, idx=idx)
idx_ms2Cor = MS2_inner_cor[[idx]]
cluster = get_ms2cluster(idx=idx, MS2_inner_cor = MS2_inner_cor, eps = 0.9, minPts = 2)
# par(mfrow=c(1,2))
plotMS2Cluster(idx_ms2Cor, cutoff = 0, main="FT00344_MS2_correlation", label=TRUE, id=1)
library(RFQI)
cluster
setwd("G:/RFQI")
devtools::document()
devtools::install()
library(RFQI)
# par(mfrow=c(1,2))
plotMS2Cluster(idx_ms2Cor, cutoff = 0, main="FT00344_MS2_correlation", label=TRUE, id=1)
# par(mfrow=c(1,2))
plotMS2Cluster(idx_ms2Cor, cutoff = 0, main="FT00344_MS2_correlation", label=TRUE, id=idx)
